<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="MoccaiCalendar.Service" locale="">
  <web>MoccaiCalendar</web>
  <name>Service</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import net.fortuna.ical4j.model.*;
import net.fortuna.ical4j.data.*;
import net.fortuna.ical4j.model.property.*;
import net.fortuna.ical4j.model.component.*;
import net.fortuna.ical4j.model.parameter.*;
import net.fortuna.ical4j.util.*;
import org.xwiki.security.authorization.*;

def calendarReference = request.calendar
if (calendarReference == null) {
  println '{{error}}No "calendar" URL parameter has been provided{{/error}}'

  return;
}

if (xcontext.userReference == null) {
  // Since Google Calendar does not support basic auth and the only thing you can give is a URL we have workaround it with a crappy hack
  // Never ever use that if you are no behind SSL
  def user = request.user;
  if (user != null) {
    def password = request.password;
    def principal = xwiki.getXWiki().getAuthService().authenticate(user, password, xcontext.context);
    if (principal != null) {
      //request.getSession().setAttribute(java.security.Principal.PRINCIPAL_SESSION_KEY, principal);
      xcontext.context.setUser(principal.getName());
    }
  }
}

def calendarDocument = xwiki.getDocument(calendarReference)
if (calendarDocument == null || calendarDocument.isNew()) {
  println "{{error}}Cannot access calendar [[$calendarReference&gt;&gt;$calendarReference]]{{/error}}";

  return ;
}

// Create the calendar
Calendar calendar = new Calendar();
calendar.getProperties().add(new ProdId("-//XWiki//iCal4j 1.0//EN"));
calendar.getProperties().add(Version.VERSION_2_0);
calendar.getProperties().add(CalScale.GREGORIAN);
calendar.getProperties().add(new XProperty("X-WR-CALNAME", calendarDocument.plainTitle));

// Add events
def events = services.query.xwql('from doc.object(MoccaCalendar.MoccaCalendarEventClass) as event where doc.parent = :parent').bindValue('parent', calendarReference).execute();

events.each {
  def eventDocument = xwiki.getDocumentAsAuthor(it);

  if (eventDocument != null) {
    def startDate = eventDocument.getValue('startDate');
    def endDate = eventDocument.getValue('endDate');

    VEvent event;
    if (endDate != null &amp;&amp; eventDocument.getValue('allDay') != 1) {
      startDate = new DateTime(startDate);
      startDate.setUtc(true);
      endDate = new DateTime(endDate);
      endDate.setUtc(true);

      event = new VEvent(startDate, endDate, eventDocument.plainTitle);
    } else {
      // Go trough String to workaround any timezone issue
      // TODO: find a more elegant way
      def utcDate = new Date(startDate.format('yyyyMMdd'), 'yyyyMMdd')
      event = new VEvent(utcDate, eventDocument.plainTitle);
    }

    def description = eventDocument.getValue('description').replace('([^\\r])\\n', '$1\\r\\n');
    description += "\r\n\r\n";
    description += eventDocument.externalURL;
    event.getProperties().add(new Description(description));

    // Generate a UID for the event..
    UidGenerator ug = new FixedUidGenerator(new SimpleHostInfo('atelier-medias.org'), eventDocument.documentReference.toString());
    event.getProperties().add(ug.generateUid());
    calendar.getComponents().add(event)
  }
}

// Set mime type
response.setContentType('text/calendar');
// set file name
response.setHeader("Content-Disposition", "attachment; filename=${calendarReference}.ics");

// Send result
CalendarOutputter outputter = new CalendarOutputter();
outputter.output(calendar, response.outputStream);
response.flushBuffer();

// We are done
xcontext.setFinished(true)
{{/groovy}}</content>
  <object>
    <name>MoccaiCalendar.Service</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b73b73aa-ff91-43eb-a2aa-11496abf803a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-events-bridge'], function($) {
  function addiCalButtons() {
    $("#moccacalendar .xwiki-livetable-display-body tr").each(function(index) {
      // Get calendar reference
      // TODO: would be cleaner to have that in a UI extension called by the livetable for the actions
      var calendarLinks = $(this).find("td a")
      if (calendarLinks.length == 0) {
        return;
      }
      var calendarLink = calendarLinks[0].attributes.href.value;

      var baseURL = "$escapetool.javascript($xwiki.getURL('MoccaCalendar.WebHome'))";
      if (baseURL.match('\/WebHome$')) {
        baseURL = baseURL.replace(/MoccaCalendar\/WebHome$/g, '');
      } else {
        baseURL = baseURL.replace(/MoccaCalendar\/$/g, '');
      }

      calendarLink = calendarLink.substring(baseURL.length);

      var calendarReference = decodeURIComponent(calendarLink.replace(/\//g, '.').replace(/\+/g, ' '));
      if (calendarReference.match('\.$')) {
        calendarReference += 'WebHome';
      }

      // Insert a iCal link
      var actionsCell = $(this).find(".actions");
      actionsCell.append("&lt;a class=\"action actionical\" href=\"$xwiki.getURL('MoccaiCalendar.Service', 'get')?calendar=" + encodeURIComponent(calendarReference) + "\"&gt;iCal&lt;/a&gt;")
    });
  };

  $(document).on('xwiki:livetable:moccacalendar:displayComplete', function(event, data) {
    addiCalButtons();
  });

  addiCalButtons();
});
</code>
    </property>
    <property>
      <name>iCalendar button injector</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <object>
    <name>MoccaiCalendar.Service</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>ca556de5-ec5f-443a-9b7a-52ba053a7343</guid>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <usesList>1</usesList>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <usesList>1</usesList>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups/>
    </property>
    <property>
      <levels>view</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
</xwikidoc>
