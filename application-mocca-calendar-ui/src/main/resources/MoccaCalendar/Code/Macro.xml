<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="MoccaCalendar.Code.Macro" locale="">
  <web>MoccaCalendar.Code</web>
  <name>Macro</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>MoccaCalendar.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Calendar Macro</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Example usage:

{{code}}

{{moccacalendar /}}

or

{{moccacalendar filter="space" /}}

or

{{moccacalendar filter="wiki" /}}
{{/code}}

{{moccacalendar filter="wiki"/}}
</content>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e2b344c5-8dc6-4189-baf0-d786436d265d</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('moccacalendar', ['jquery', 'fullcalendar', 'moment'], function(jQuery, fullCalendar, moment) {

// Make sure the XWiki 'namespace' and the ModalPopup class exist.
if (typeof(XWiki) == "undefined" || typeof(XWiki.widgets) == "undefined" || typeof(XWiki.widgets.ModalPopup) == "undefined") {
  if (typeof console != "undefined" &amp;&amp; typeof console.warn == "function") {
    console.warn("[MessageBox widget] Required class missing: XWiki.widgets.ModalPopup");
  }
} else {
  if (typeof(XWiki.MoccaCalendar) == "undefined") {
    XWiki.MoccaCalendar = {};
  }

#template('colorThemeInit.vm')

  XWiki.MoccaCalendar.Helper = Class.create({
  initialize: function(calendar, dateFormat, jsonServiceUrl, createEventBaseUrl, updateEventUrl, newPageNameUrl, dateCheckUrl, deleteEventInstanceUrl, newPageParams, formToken) {
    this.calendar = calendar;
    this.dateFormat = dateFormat;
    this.jsonServiceUrl = jsonServiceUrl;
    this.createEventBaseUrl = createEventBaseUrl;
    this.updateEventUrl = updateEventUrl;
    this.newPageNameUrl = newPageNameUrl;
    this.dateCheckUrl = dateCheckUrl;
    this.deleteEventInstanceUrl = deleteEventInstanceUrl;
    this.newPageParams = newPageParams;
    this.formToken = formToken;
    // hack: extract the "day only" and "time only" format, if possible
    // assumes time comes after the day
    var tSep = dateFormat.search(/[hk]/i)
    if (tSep != -1) {
      this.timeFormat = dateFormat.substring(tSep, dateFormat.length);
      this.dayFormat = dateFormat.substring(0, tSep-1);
    } else { // ??
      this.timeFormat = '';
      this.dayFormat = dateFormat;
    }
  },
  displayError: function(errorMessage) {
    if (!errorMessage) {
      errorMessage = "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
    }
    if (this.errorNotification) {
       this.errorNotification.hide()
    }
    this.errorNotification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.failed'))" + errorMessage, "error");
  },
  showCreateEventFrom: function(start, end) {
    var allDay = !start.hasTime();
    var singleDay = (allDay &amp;&amp; end.diff(start,'days') &lt;= 1);

    if (typeof(Externals) != 'undefined' &amp;&amp; typeof(Externals.SimpleDateFormat) != 'undefined') {
      var mySimpleDateFormatter = new Externals.SimpleDateFormat(this.dateFormat);
      start = mySimpleDateFormatter.format(start.local().toDate());
      end = (singleDay)?'':mySimpleDateFormatter.format(end.local().toDate());
    } else {
      var mySimpleDateFormatter = moment().toMomentFormatString(this.dateFormat);
      start = moment(start.local().toDate()).format(mySimpleDateFormatter);
      end = (singleDay)?'':moment(end.local().toDate()).format(mySimpleDateFormatter);
    }
    var paramPrefix = "MoccaCalendar.MoccaCalendarEventClass_0_";
    var params = "&amp;" + paramPrefix + "startDate=" + encodeURIComponent(start);
    params += "&amp;" + paramPrefix + "endDate=" + encodeURIComponent(end);
    params += "&amp;" + paramPrefix + "allDay=" + allDay;
    return this.showCreateEvent(params);
  },
  showCreateEvent: function(extraParams) {
    var params = extraParams || '';
    return new XWiki.MoccaCalendar.MoccaCalendarPopup({pageURL: this.createEventBaseUrl + params}, this);
  },
  updateEvent: function(page, isResize, delta, startDate, endDate, revertFunc) {
    var savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
    var savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
    var calendar = this.calendar;

    savingBox.show();
    savedBox.hide();

    // let's call the calendar update
    var params = "page=" +  encodeURIComponent(page) + "&amp;isResize=" + (isResize ? "1" : "0") + "&amp;delta=" + delta.asMilliseconds() + "&amp;startDate=" + startDate.format()
    if (endDate) { params += "&amp;endDate=" + endDate.format(); }
    params += "&amp;allDay=" + (startDate.hasTime()?"":"1");
    var url = this.updateEventUrl + params;
    jQuery.ajax(url).fail(function (data) {
      savingBox.hide();
      this.displayError();
      if (revertFunc) revertFunc();
    }.bind(this)).success(function (data) {
      if (data.success) {
        savingBox.hide();
        savedBox.show();
        calendar.fullCalendar('refetchEvents');
      } else {
        savingBox.hide();
        this.displayError(data.message);
        if (revertFunc) revertFunc();
      }
    }.bind(this));
  }
  });

  //
  // "static" helpers
  //
  XWiki.MoccaCalendar.Helper.getCalendarView = function(defaultVal) {
    var cookieName = 'MoccaCalendar_view=';
    if (document.cookie) {
      var ca = document.cookie.split(';');
      for(var i=0;i&lt;ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(cookieName) == 0) return c.substring(cookieName.length,c.length);
      }
    }
    return defaultVal;
  };

  XWiki.MoccaCalendar.Helper.setCalendarView = function(value) {
    var cookieName = 'MoccaCalendar_view=';
    document.cookie = cookieName + value + "; path=/";
  };

  //
  // the custom confirmation dialog on deletion of recurrent events
  //
  XWiki.MoccaCalendar.MoccaCalendarRecurrentDeleteBox = Class.create(XWiki.widgets.ConfirmationBox, {
     createContent : function ($super, data) {
       try {
         var content = $super(data);
         var deleteAllEventsButton = this.createButton("button", data.deleteAllEventsButtonText, "", "", "btn-danger");
         content.down(".buttons&gt;*").insert({before: deleteAllEventsButton });
         Event.observe(deleteAllEventsButton, "click", this.onDeleteAllEvents.bindAsEventListener(this));
         return content;
       } catch (e) {
         console.log(e);
         return ""; // XXX should NEVER happen
       }
     },
     onDeleteAllEvents : function() {
       this.closeDialog();
       this.behavior.onDeleteAllEvents();
     }
  });

  //
  // the dialog to show / edit events
  //
  XWiki.MoccaCalendar.MoccaCalendarPopup = Class.create(XWiki.widgets.ModalPopup, {
    defaultInteractionParameters: {
      editMode : true
    },
    initialize: function($super, interactionParameters, helper) {
      this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
      this.interactionParameters.isNew = (undefined === this.interactionParameters.event)
      this.helper = helper;
      this.saving = false;
      // call constructor from ModalPopup with params content, shortcuts, options
      $super(
        // this element will end up as 'this.content'
        new Element('form', {'class' : 'xform', 'id' : 'inline'}),
        {
          "show": {method: this.showDialog, keys: []},
          "close": {method: this.closeDialog, keys: ['Esc']}
        },
        {
          verticalPosition: "top",
          backgroundColor: "$theme.pageHeaderBackgroundColor",
          title : this.interactionParameters.editMode ? "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.create'))" : "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.view'))",
          removeOnClose : true,
          onClose : function() {
            document.stopObserving('xwiki:moccacalendar:editmode');
            document.stopObserving('xwiki:moccacalendar:instancesaved');
            jQuery(document).trigger('xwiki:actions:cancel')
          }
        }
      );

      var that = this;
      document.observe('xwiki:moccacalendar:editloaded', function() {
            $$('input.datetime').each(function(dateTimeInput) {
              if (dateTimeInput.getAttribute('name') &amp;&amp; dateTimeInput.getAttribute('name').startsWith('MoccaCalendar.MoccaCalendarEventClass')) {
                dateTimeInput.observe('change', function(event) {
                  that.handleDatetimeFieldChange(event, $(this));
                });
              }
            });

            // this is the "all day" box
            that.allDay = $('MoccaCalendar.MoccaCalendarEventClass_0_allDay');
            that.allDay.observe('change', function(event) {
              that.handleAllDayFieldChange(event, $(this));
            });
            // use handler to init date picker, too
            that.handleAllDayFieldChange(null, that.allDay);

            // try to load editor
            if (document.getElementById('MoccaCalendar.MoccaCalendarEventClass_0_description')) {
              try {
                var newElements =  jQuery.makeArray(jQuery('#formcontent'))
                jQuery(document).trigger('xwiki:dom:updated', { 'elements' : newElements })
              } catch (e) {
                console.log(e)
              }
            }
      });

      // only in case we are editing a recurrent event:
      // a flag and a handler for events from the MoccaCalendar.Code.MoccaCalendarEventModificationClass
      // signaling that we are switching between "one instance" and "all instances" of a recurrent event
      this.editModeIsSingleInstance = false;
      document.observe('xwiki:moccacalendar:editmode', function(event, element) {
        this.editModeIsSingleInstance = event.memo.oneInstance;
      }.bind(this));
      // in case of an "one instance" save the action happens in the MoccaCalendarEventModificationClass
      // and we only listen for the results to close the dialog
      document.observe('xwiki:moccacalendar:instancesaved', function(event) {
        this.savedBox.show();
        this.closeDialog();
        this.helper.calendar.fullCalendar('refetchEvents');
      }.bind(this));

      this.loadEventContent();
      this.showDialog();
      this.setClass("moccacal-modal-popup");

      this.savingBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress", {inactive: true});
      this.savedBox = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done", {inactive: true});
      this.savingBox.hide();
      this.savedBox.hide();
    },

    loadEditForm: function(event) {
      event.stop();
      this.interactionParameters.editMode = true;
      this.loadEventContent();
    },

    submitForm: function(event) {
      if (this.editModeIsSingleInstance) {
        // console.log('we are in single instance mode; skip saving the main form')
        // we trust the code for editing single instances of recurrent events to handle the save
        return;
      }

      event.stop();
      var titleField = this.content.down('[name="title"]');

      var title = $(titleField).getValue();
      title = title.replace(/^ +/,'').replace(/ +$/,'')
      if (title.length == 0) {
        $$(".val_title_notempty").each(Element.show);
        return false;
      }
      else {
        $$(".val_title_notempty").each(Element.hide);
      }

      this.saving = true; // signal other events we are about to save
      // also tell the Editor to update the contents to save:
      jQuery(document).trigger('xwiki:actions:beforeSave')
      this.savedBox.hide();
      this.savingBox.show();

      if (this.interactionParameters.isNew) {
       // calculate "automatic" document name:
       var name = title.replace(/[\/?]/g,'');

       // ask the JSONService to create an unused event name for us
       new Ajax.Request( this.helper.newPageNameUrl, {
        method: 'get',
        parameters: { 'outputSyntax': 'plain', 'newEvent' : name, 'parent': $F($("calendarParent")) },
        onSuccess: function(response) {
          try {
            var error = (response.responseJSON) ? response.responseJSON['error'] : "$escapetool.javascript($services.localization.render('MoccaCalendar.generic.errormessage'))";
            if (error) {
              this.savingBox.hide();
              this.helper.displayError(error);
            } else {
              var eventName = response.responseJSON['name'];
              var parentLocation = response.responseJSON['parent'];
              this.saveEvent(parentLocation, eventName);
            }
          } catch(e) { alert(e); }
        }.bind(this),
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.saving = false;
            this.savingBox.hide();
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
       });
      } else {
        this.saveEvent();
      }

      return false;
    },

    /** save the current event.
        Note: parameters are only used if event is new, as otherwise we know the url to save the event to already
    */
    saveEvent: function(parentCalendar, newEventName) {
      var saveUrl;
      if (this.interactionParameters.isNew) {
        var calendarRef = XWiki.Model.resolve(parentCalendar, XWiki.EntityType.SPACE);
        var newEventSpaceRef = new XWiki.EntityReference(newEventName, XWiki.EntityType.SPACE, calendarRef);
        var newEventRef = new XWiki.EntityReference("WebHome", XWiki.EntityType.DOCUMENT, newEventSpaceRef);
        saveUrl = new XWiki.Document(newEventRef).getURL('save', this.helper.newPageParams);
      } else {
        saveUrl = this.interactionParameters.event.saveUrl;
      }
      this.content.writeAttribute('action', saveUrl + '&amp;xpage=plain&amp;ajax=true');
      this.content.request({
        onSuccess: function() {
          this.saving = false;
          this.savingBox.hide();
          this.savedBox.show();
          jQuery(document).trigger('xwiki:actions:save')
          this.closeDialog();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          try {
            this.saving = false;
            var responseText = e.responseText;
            $("forminnercontent").innerHTML = responseText;
            this.savingBox.hide();
            if (e.status &gt; 400) { this.helper.displayError(); }
            document.fire('xwiki:moccacalendar:editloaded');
          } catch (e) {
            alert('Failed to save event!');
          }
        }.bind(this)
      })
    },

    showDeleteForm: function(event) {
      event.stop();
      var that = Object.clone(this);
      this.closeDialog();
      var eventName = that.interactionParameters.event.title.escapeHTML();
      if (that.interactionParameters.event.recurrent) {
         new XWiki.MoccaCalendar.MoccaCalendarRecurrentDeleteBox({
          onYes: that.deleteSingleEventInstance.bind(that),
          onNo: function() { new XWiki.MoccaCalendar.MoccaCalendarPopup(that.interactionParameters, that.helper) },
          onDeleteAllEvents: that.deleteEvent.bind(that)
        },
        { confirmationText: "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.confirmDelete',"@@REPLACE@@"))".sub("@@REPLACE@@", eventName),
             yesButtonText: "$escapetool.javascript($services.localization.render('yes'))",
              noButtonText: "$escapetool.javascript($services.localization.render('no'))",
             deleteAllEventsButtonText: "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.confirmDelete.allEventsButton'))"
        });
      } else {
      new XWiki.widgets.ConfirmationBox({
          onYes: function() { that.deleteEvent() },
          onNo: function() { new XWiki.MoccaCalendar.MoccaCalendarPopup(that.interactionParameters, that.helper) }
        },
        { confirmationText: "$escapetool.javascript($services.localization.render('MoccaCalendar.calendarevent.confirmDelete',"@@REPLACE@@"))".sub("@@REPLACE@@", eventName),
             yesButtonText: "$escapetool.javascript($services.localization.render('yes'))",
              noButtonText: "$escapetool.javascript($services.localization.render('no'))"
        });
      }
    },
    deleteEvent: function() {
      var pending = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress");
      new Ajax.Request(this.interactionParameters.event.deleteUrl, {
        method: 'post',
        parameters: {'confirm': 1, 'ajax': true, 'form_token': this.helper.formToken},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          pending.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done");
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          pending.hide();
          this.helper.displayError();
        }.bind(this)
      });
    },
    deleteSingleEventInstance: function() {
      if (!this.interactionParameters.event.recurrent) {
        // should not happen
        return this.deleteEvent();
      }

      var pending = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.inProgress'))", "inprogress");
      new Ajax.Request(this.helper.deleteEventInstanceUrl, {
        method: 'post',
        parameters: {'instanceStart' : this.interactionParameters.event.start.format('YYYY-MM-DD[T]HH:mm'), 'event' : this.interactionParameters.event.id, 'outputSyntax':'plain' },
        onSuccess: function(response) {
          if (response.status == 0) {
            return;
          }
          pending.hide();
          if (response.responseJSON['error']) {
            this.helper.displayError(response.responseJSON['error']);
          } else {
            new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('core.widgets.confirmationBox.notification.done'))", "done");
          }
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this),
        onFailure: function(e) {
          pending.hide();
          this.helper.displayError();
          this.helper.calendar.fullCalendar('refetchEvents');
        }.bind(this)
      });
    },

    loadEventContent: function() {
      var url;
      if (this.interactionParameters.isNew) {
        url = this.interactionParameters.pageURL;
      } else {
        url = (this.interactionParameters.editMode)?this.interactionParameters.event.editUrl:this.interactionParameters.event.url;
      }
      new Ajax.Request(url, {
        method: 'get',
        parameters: {'xpage': 'plain', 'xhidden': 1},
        onSuccess: function(transport) {
          if (transport.status == 0) {
            return;
          }
          var response = transport.responseText || "no response text";
          var old = $('formcontent');
          if (old) {
            old.purge();
            old.remove();
          }
          this.content.insert('&lt;div id="formcontent"&gt;&lt;div id="forminnercontent"&gt;' + response + '&lt;/div&gt;&lt;/div&gt;');
          var formcontent = $('formcontent');
          var buttons = new Element('div', {'class':'buttons'});
          var oldSkin = ! $('body').hasClassName('skin-flamingo'); // FIXME: bad b/w compat hack
          formcontent.insert(buttons);
          if (this.interactionParameters.editMode) {
            var that = this;
            buttons.insert(this.createButton("submit","$escapetool.javascript($services.localization.render('save'))","","save-moccacalendar-event","btn"));
            buttons.down('#save-moccacalendar-event').observe('click', this.submitForm.bind(this));
            buttons.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            buttons.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            // MOCCACAL-128: the event template has a space in the title to avoid showing the page name, but we want to remove this on load
            var titleField = formcontent.down('input[name="title"]')
            if (titleField &amp;&amp; !titleField.getAttribute('value').trim()) { titleField.setAttribute('value','') }
            document.fire('xwiki:moccacalendar:editloaded');
            $("MoccaCalendarEvent.MoccaCalendarEventClass_0_title").focus();
          } else {
            var leftGroup = new Element('div', {'class':'btn-group btn-group-left'});
            buttons.insert(leftGroup);
            if (this.interactionParameters.event.canEdit) {
              if (oldSkin) {
                leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('edit'))","","edit-moccacalendar-event","btn"));
              } else {
                leftGroup.insert('&lt;button class="button btn btn-default" id="edit-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-pencil"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('edit'))"+'&lt;/button&gt;');
              }
              leftGroup.down("#edit-moccacalendar-event").observe('click', this.loadEditForm.bind(this));
            }
            if (oldSkin) {
              // FIXME: this should be a plain link, but then it has no styles
              leftGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('view'))","","view-moccacalendar-event","btn"));
              leftGroup.down("#view-moccacalendar-event").observe('click', function(e) { e.stop(); window.location.href = this.interactionParameters.event.url; }.bind(this));
              leftGroup.insert('&lt;span class="buttonwrapper"&gt;&lt;a href="#" id="cancel-moccacalendar-event" class="secondary button"&gt;' + "$escapetool.javascript($services.localization.render('cancel'))" + '&lt;/a&gt;&lt;/span&gt;');
            } else {
              leftGroup.insert(' &lt;a class="btn btn-default" id="view-moccacalendar-event" href="#"&gt;&lt;span class="glyphicon glyphicon-file"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('view'))"+'&lt;/button&gt;');
              leftGroup.down("#view-moccacalendar-event").setAttribute('href',this.interactionParameters.event.url);
              leftGroup.insert('&lt;button class="button btn btn-default" id="cancel-moccacalendar-event"&gt;&lt;span class="glyphicon glyphicon-remove"&gt;&lt;/span&gt; '+"$escapetool.javascript($services.localization.render('cancel'))"+'&lt;/button&gt;');
            }
            leftGroup.down('#cancel-moccacalendar-event').observe('click', this.closeDialog.bind(this));
            if (this.interactionParameters.event.canDelete) {
              var rightGroup = new Element('div', {'class':'btn-group btn-group-right'});
              buttons.insert(rightGroup);
              if (oldSkin) {
                rightGroup.insert(this.createButton("button","$escapetool.javascript($services.localization.render('delete'))","","delete-moccacalendar-event","btn"));
              } else {
                rightGroup.insert(' &lt;button class="button remove-button btn btn-danger" id="delete-moccacalendar-event"&gt; &lt;span class="glyphicon glyphicon-remove"&gt; &lt;/span&gt; '+"$escapetool.javascript($services.localization.render('delete'))"+'&lt;/button&gt;');
              }
              rightGroup.down("#delete-moccacalendar-event").observe('click', this.showDeleteForm.bind(this));
            }
            formcontent.insert(new Element('div', {'class': 'clearfloats'}));
          }
        }.bind(this),
        onFailure: function() {
          this.content.insert('Something went wrong...');
        }.bind(this)
      });
    },

    handleDatetimeFieldChange : function(event, element) {
      if (this.saving) { return; }
      var dateStr = element.getValue()
      if (dateStr.match(/^\s*$/)) {
        return;
      }

      // now we would have to find out if the user has typed in something like a date with a time
      // for this we have to parse the date. as we do not have any generic way to do that we send it to the backend ...
      this.checkIfDateWithTime(function(result) {
         var allDay = result.responseJSON.isAllDay;
         if (allDay === '') { return; } // indeterminate
         if (allDay != this.allDay.getValue()) {
           this.allDay.setValue(allDay)
           this.handleAllDayFieldChange(null, this.allDay)
         }
      }.bind(this))
    },
    checkIfDateWithTime : function(callback) {
      new Ajax.Request( this.helper.dateCheckUrl, {
        method: 'get',
        parameters: {action: 'checkDate', outputSyntax: 'plain', 'startDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_startDate'), 'endDate' : $F('MoccaCalendar.MoccaCalendarEventClass_0_endDate')},
        onSuccess: callback,
        onFailure: function(response) {
          // this should not happen ...
          try {
            this.helper.displayError();
          } catch(e) { alert(e); }
        }.bind(this)
      })
    },

    handleAllDayFieldChange : function(event, element) {
      if (this.saving) { return; }
      var that = this;
      this.content.select('input.datetime').each(function(d) {
        // clear old observer
        // it seems we cannot do this reliably except of making a copy
        var dateFieldCopy = d.cloneNode()
        var parent = d.parentNode

        // update title date format and add a new date picker
        // FIXME: it would be great if we could remove / restore the time values of the date
        // but for this we would really need to be able to parse the date on client side
        var newFormat = element.getValue() ? that.helper.dayFormat : that.helper.dateFormat;
        dateFieldCopy.setAttribute('title', newFormat);
        dateFieldCopy.setAttribute('data-format', newFormat);
        jQuery(dateFieldCopy).removeClass('initialized')
        parent.replaceChild(dateFieldCopy, d)
        if (XWiki.DateTimePicker === undefined) {
          document.fire('xwiki:dom:updated', {elements: [parent]})
        } else {
          new XWiki.DateTimePicker(dateFieldCopy, newFormat);
        }
      })
    }
  });


  //
  // our "agenda" view - a bit different from what fullCalendar calls an "agenda"
  // so for fullCalendar we call it "plainList"
  //

  // the date range generater
  // we totally abuse the mechanism to have only two date ranges
  // XXX: DateProfileGenerator has no "extends", so we "subclass" manually
  var PastFutureGenerator =  (function () {
    var _super = fullCalendar.DateProfileGenerator;
    function PastFutureGenerator() {
        return _super.apply(this, arguments)
    }

    PastFutureGenerator.prototype = Object.extend({}, _super.prototype)

    // Given a single current unzoned date, produce information about what range to display.
    //
    // we only have two ranges:
    //   if date is in the past: from 2yrs ago to yesterday
    //   if date is in the future: from now to 2yrs in the future
    PastFutureGenerator.prototype.buildCurrentRangeInfo = function(date, direction) {
      // console.log('buildCurrentRangeInfo', direction, date.toString());
      duration = 0
      unit = 'year'
      if (direction === undefined) {
        if (this._view.isPast) {
          direction = -1
        } else {
          direction = 1
        }
      }
      date = this._view.calendar.getNow().clone().stripTime()
      if (direction &lt; 0) {
        endDate = date.clone().subtract(1,'d')
        startDate = endDate.clone().subtract(2, 'y')
      } else {
        startDate = date.clone()
        endDate = startDate.clone().add(2, 'y')
      }
      // console.log('buildCurrentRangeInfo  result:', startDate.toString(), endDate.toString())
      unzonedRange = new fullCalendar.UnzonedRange(startDate, endDate);
      return { duration: duration, unit: unit, unzonedRange: unzonedRange }
    }

    return PastFutureGenerator;
  }());

  // the "event renderer"
  // this seems the way to go with fullcalendar3
  // except that for some reason we still have to insert
  // the generated html manually afterwards
  var PlainListEventRenderer = (function () {
    var _super = fullCalendar.EventRenderer;
    function PlainListEventRenderer() {
      return _super.apply(this, arguments)
    }

    PlainListEventRenderer.prototype = Object.extend({}, _super.prototype)

    PlainListEventRenderer.prototype.render = function(eventsPayload) {
      var events = []
      // oh, great, the eventsPayload has repacked all events, loosing the sort
      for (key in eventsPayload) {
        var v = eventsPayload[key].eventInstances;
        // console.log('render', key, v);
        for (var i=0; i&lt;v.length; i++) {
          events.push(v[i]);
        }
      }

      var larger, smaller;
      if (this.view.isPast) {
        larger = 1
        smaller = -1
      } else {
        larger = -1
        smaller = 1
      }
      events.sort(function(e1,e2) {
        if (e1.dateProfile.start.isBefore(e2.dateProfile.start)) {
          return larger;
        }
        if (e2.dateProfile.start.isBefore(e1.dateProfile.start)) {
          return smaller;
        }
        return 0;
      })

      rendered = []
      for (var i=0; i&lt;events.length; i++) {
        var event = events[i]
        // here we should really render something
        // instead of relying on the server side generated html
        var seg = {
          footprint: event,
          el: jQuery(events[i].def.miscProps.html)
        }
        seg.el.data('fc-seg', seg)
        rendered.push(seg)
      }
      this.fgSegs = rendered;
      return true;
    }

    return PlainListEventRenderer;
  }());

  var PlainList = fullCalendar.ListView.extend({

    initialize: function() {
       this._super = fullCalendar.ListView.prototype;
       this.isPast = false;
       // no super class here. XXX: we should use a "normal" constructor instead
       // fullCalendar.ListView.prototype.initialize.apply(this);
    },

    executeEventRender: function(eventsPayload) {
      var retVal = this._super.executeEventRender.apply(this, arguments);
      // here we must have done something wrong,
      // as we need to fetch the rendered elements from the eventRenderer
      // and insert then manually
      segs = this.eventRenderer.fgSegs;
      for (var i=0;i&lt;segs.length; i++) {
        this.contentEl.append(segs[i].el)
      }
      return retVal;
    },

    executeEventUnrender: function() {
      this.contentEl.empty()
      return this._super.executeEventUnrender.apply(this, arguments);
    },


    // this method is both called with the pre/next buttons
    // and from other places to ensure the date is in range.
    // we set the "isPast" flag as a side effect here
    setDate: function(date) {
      now = this.calendar.getNow().clone().stripTime();
      this.isPast = date.isBefore(now);
      return this._super.setDate.apply(this, arguments);
    },

    // sets the "noEventsMessage" as a side effect.
    computeTitle: function() {
      if (this.isPast) {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titlepast'))";
        this.options['noEventsMessage'] = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.nopastevents'))";
      } else {
        this.title = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.titleupcoming'))";
        this.options['noEventsMessage'] = "$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist.noupcomingevents'))";
      }
      return this.title;
    },
  
    // drag &amp; drop protocol - no-ops
    select: function(start, end) {
      // console.log('select');
    },
    unselect: function() {
      // console.log('unselect');
    },

  }) // end PlainList extends ListView

  // hook up component classes to the view
  PlainList.prototype.dateProfileGeneratorClass = PastFutureGenerator
  PlainList.prototype.eventRendererClass = PlainListEventRenderer

  fullCalendar.defineView('plainList', PlainList)
  
  if (fullCalendar.internalApiVersion != 12) {
    console &amp;&amp; typeof(console.warn) == 'function' &amp;&amp;
      console.warn('fullcalendar api version changed to', fullCalendar.internalApiVersion)
  }

} // if the XWiki.widgets.ModalPopup  is defined

});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>45a5f3c1-9bc2-4338-bfda-735845df37cd</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>/* events */
div.calendar_date_select {
  z-index: 1010;
}
div.moccaevent {
  border-style:solid;
  border-width:0 0 0 5px;
  padding-left: 5px;
}
div.moccaevent h5 {
  margin-bottom: 5px;
}

/* events in the modal dialog */
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-left {
  float: left;
}
div.xdialog-box-moccacal-modal-popup .btn-group.btn-group-right {
  float: right;
}
div.xdialog-box-moccacal-modal-popup .btn-group .btn + .btn {
  margin-left: 1ex;
}
/* a special rule for flamingo to try to fit the edit form in the model dialog */
.skin-flamingo div.xdialog-box-moccacal-modal-popup .xform dl dt {
   margin-top: 0.6em;
}
.xdialog-box-moccacal-modal-popup {
  width: 600px;
}

/* twiddeling with the recurrency input field position */
div.xdialog-box-moccacal-modal-popup dl {
   margin-bottom: 0;
}
div.xdialog-box-moccacal-modal-popup #recurrentFields dl {
   margin-bottom: 20px;
}

/* Make sure the date time picker is shown on top of the event modal. */
.bootstrap-datetimepicker-widget {
  z-index: 1006;
}

/* calendar */
body .fc {
  padding-right: 1px; /* odd hack to avoid scrollbars in FF at times */
}
div.calendar-buttons {
  position: relative;
  margin-top: 2.4em;
}
.skin-flamingo div.calendar-buttons {
  margin-top: 2.8em;
}
div.calendar-buttons span.buttonwrapper {
  position: absolute;
  right: 0;
  top: -2.2em;
  margin: 0;
}
.skin-flamingo div.calendar-buttons span.buttonwrapper {
  right: 1px;
  top: -2.8em;
}
/* special rules if showing calendars as gadgets in the dashboard - everything is a bit smaller to fit in */
.gadget .fc-toolbar, .gadget div.calendar-buttons {
  font-size: 85%;
}
.gadget div.calendar-buttons span.buttonwrapper {
  top: -2em;
}
.skin-flamingo .gadget div.calendar-buttons span.buttonwrapper {
  top: -3.2em;
}
.gadget .fc h2 {
  border: 0;
}
.skin-flamingo .gadget .fc h2 {
  font-size: 140%;
}

div.fc-view.fc-plainList-view {
  border-width: 0;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>1f960d6f-5530-4612-b3a3-8eed08888e10</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <customDisplay/>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <hint/>
        <name>async_cached</name>
        <number>12</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <hint/>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>13</number>
        <picker>1</picker>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>5</size>
        <sort/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <customDisplay/>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <hint/>
        <name>async_enabled</name>
        <number>11</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <code>
        <contenttype>---</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>Text</editor>
        <hint/>
        <name>code</name>
        <number>10</number>
        <picker>0</picker>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <hint/>
        <name>contentDescription</name>
        <number>9</number>
        <picker>0</picker>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentJavaType>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue>Unknown</defaultValue>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <freeText>allowed</freeText>
        <hint/>
        <largeStorage>1</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentJavaType</name>
        <number>8</number>
        <picker>1</picker>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <sort/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>Unknown|Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentJavaType>
      <contentType>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <hint/>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <picker>1</picker>
        <prettyName>Macro content availability</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <sort/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>defaultCategory</name>
        <number>4</number>
        <picker>1</picker>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <hint/>
        <name>description</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>id</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>name</name>
        <number>2</number>
        <picker>1</picker>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <hint/>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <hint/>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <picker>1</picker>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <sort/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <code>{{velocity output="false"}}
#if('#dateTimePicker_import()' == "#dateTimePicker_import()")
  #set($picker_macro = false)
  ## A simple date picker widget.
  $xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true)
  $xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', true)
  ## Used to parse and serialize the selected date using the date format specified in the XClass.
  $xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', true)
  ## A wrapper over the CalendarDateSelect widget that uses the SimpleDateFormat to parse/serialize the dates.
  $xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true)
  $xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js')
#else
  #set($picker_macro = true)
#end
$xwiki.jsx.use("Calendar.FullCalendar", {'defer': false})
$xwiki.jsx.use("MoccaCalendar.Code.Macro", {'defer': false})
$xwiki.jsx.use("MoccaCalendar.Code.DatePickerExtension", {'defer': false})
$xwiki.jsx.use("MoccaCalendar.MoccaCalendarEventSheet")
$xwiki.jsx.use("MoccaCalendar.Code.MoccaCalendarEventModificationClass")
$xwiki.ssx.use("Calendar.FullCalendar")
$xwiki.ssx.use("MoccaCalendar.Code.Macro")
#set($calcounter = $request.getAttribute('MoccaCalendar.Macro:counter'))
#if(!$calcounter) #set($calcounter = 0) #else #set($calcounter = $calcounter + 1) #end
#set($discard = $request.setAttribute('MoccaCalendar.Macro:counter', $calcounter))
#set($filter = $xcontext.macro.params.filter)
#if(!$filter)
#set($filter = 'page') ## possible values are wiki, space, page
#end
#set($calendarDoc = $xcontext.macro.params.calendarDoc)
#if(!$calendarDoc)
#set($calendarDoc = $doc.fullName)
#end
#set($defaultView = $xcontext.macro.params.defaultView)
#if(!$defaultView)
 #set($defaultView = "")
#end
#set($firstDay = $xcontext.macro.params.firstDay)
#if(!$firstDay)
  #set($firstDay = "$services.localization.render('MoccaCalendar.calendar.firstDayOfWeek')")
#end
#set($minTime = $xcontext.macro.params.minTime)
#if(!$minTime)
  #set($minTime = "")
#else
  ## b/w compat:
  #if($minTime.indexOf(':')&lt;0))
    #set($minTime = "$minTime:00")
  #end
#end
#set($maxTime = $xcontext.macro.params.maxTime)
#if(!$maxTime)
  #set($maxTime = "")
#else
  ## b/w compat:
  #if($maxTime.indexOf(':')&lt;0))
    #set($maxTime = "$maxTime:00")
  #end
#end
#set($year = $xcontext.macro.params.year)
#if(!$year)
 #set($year = "")
#end
#set($month = $xcontext.macro.params.month)
#if(!$month)
 #set($month = "")
#end
#set($date = $xcontext.macro.params.date)
#if(!$date)
 #set($date = "")
#end
#set($dateFormat = $!xwiki.getClass("MoccaCalendar.MoccaCalendarEventClass").get("startDate").getProperty('dateFormat').value)
#if("$!dateFormat" == "")
  #set($dateFormat = "dd.MM.yyyy HH:mm:ss")
#end
#set ($eventLimit = $xcontext.macro.params.eventLimit)
#if (!$eventLimit)
 #set ($eventLimit = false)
#end

##
## some hardwired values that you can feel free to customize
##
#set($jsonUrl = $xwiki.getDocument("MoccaCalendar.Code.JSONService").getURL("get"))
#set($newPageNameUrl = $xwiki.getDocument("MoccaCalendar.Code.NewEventNameService").getURL("get"))
#set($dateCheckUrl = $xwiki.getDocument("MoccaCalendar.Code.DateCheckService").getURL("get"))
#set($updateUrl = $xwiki.getDocument("MoccaCalendar.Code.UpdateService").getURL("get"))
#set($deleteEventInstanceUrl = $xwiki.getDocument("MoccaCalendar.Code.DeleteEventInstanceService").getURL("get"))
#set($left = "prev,next today")
#set($center = "title")
#set($right = "agendaDay,agendaWeek,month,plainList")

#set($canCreateEvents = $xwiki.hasAccessLevel("edit", $xcontext.getUser(), $calendarDoc))
#set ($calendarsFilter = $request.parameterMap['calendarsFiltler'])
{{/velocity}}

{{velocity}}
#if ($xcontext.action == 'view' &amp;&amp; $filter != 'page')
  #set ($statement = "select doc.fullName, calendar.color from Document doc, doc.object(MoccaCalendar.MoccaCalendarClass) calendar where doc.name &lt;&gt; 'MoccaCalendarTemplate'")
  #set ($results = $services.query.xwql($statement).execute())
  #if ($results.size() &gt; 1)
    === $services.localization.render('MoccaCalendar.calendarevent.filterEvents') ===
    {{html clean="false"}}
      &lt;form action="" method="get"&gt;
        #foreach ($result in $results)
          #set ($docFullName = $result[0])
          #set ($backgroundColor = $result[1])
          #set ($checked = $calendarsFilter.contains($docFullName))
          #set ($title = $xwiki.getDocument($docFullName).displayTitle)
          &lt;div&gt;
            &lt;input type="checkbox" id="$docFullName" name="calendarsFiltler" value="$docFullName" #if ($checked) checked #end style="accent-color:$backgroundColor"/&gt;
            &lt;label for="$docFullName"&gt;$title&lt;/label&gt;
          &lt;/div&gt;
        #end
        &lt;input type="submit" class="btn btn-primary" value="$services.localization.render('MoccaCalendar.calendarevent.filterEvents.submit')" /&gt;
      &lt;/form&gt;
    {{/html}}
  #end
#end
#if ($xcontext.action=='view' || $xcontext.action=='export')
{{html clean="false" wiki="false"}}
#if($canCreateEvents)
## create event link
&lt;div class="calendar-buttons"&gt;
&lt;span class="buttonwrapper"&gt;
&lt;button class="btn btn-success" id="calendar${calcounter}-btn"&gt;&lt;span class="glyphicon glyphicon-plus"&gt;&lt;/span&gt; $escapetool.html($services.localization.render('MoccaCalendar.calendarevent.create'))&lt;/button&gt;
&lt;/span&gt;
&lt;/div&gt;
## end create event link
#end
&lt;div id="calendar${calcounter}"&gt;&lt;/div&gt;
#if ($calcounter == 0 &amp;&amp; $canCreateEvents)
  ## Show event description form to trigger load of CK Editor resources.
  &lt;form class="hidden"&gt;
    #set ($eventObject = $xwiki.getDocument('MoccaCalendar.MoccaCalendarEventTemplate').getObject('MoccaCalendar.MoccaCalendarEventClass'))
    $eventObject.display('description','edit').replace('{{html clean="false" wiki="false"}}', '').replace('{{/html}}', '')
  &lt;/form&gt;
#end
&lt;script type="text/javascript"&gt;
require(['jquery', 'moccacalendar'], function(jQuery) {
 jQuery(document).ready(function() {

  var defaultView = XWiki.MoccaCalendar.Helper.getCalendarView("$!escapetool.javascript($defaultView)");

  var defaultEventData = {
    xpage: 'plain',
    outputSyntax: 'plain',
    calendarDoc: "$!escapetool.javascript($calendarDoc)",
    filter: "$!escapetool.javascript($filter)",
    calendarsFilter: "$!escapetool.javascript($stringtool.join($calendarsFilter, ','))",
    classname: "MoccaCalendar.MoccaCalendarEventClass",
    startfield: "startDate",
    endfield: "endDate",
    durationfield: ""
  };

  // page is now ready, initialize the calendar...
  var calendar = jQuery('#calendar${calcounter}').fullCalendar({
    eventLimit: $escapetool.javascript($eventLimit),
    events: {
      url : "$!escapetool.javascript($jsonUrl)",
      type: 'GET',
      data : function() {
        // as we also get called before the calendar is fully initialized
        // we cannot get the current view reliably from the calendar itself
        // instead use our trusty helper
        return jQuery.extend(defaultEventData, {'outputView': XWiki.MoccaCalendar.Helper.getCalendarView(defaultView)} );
      },
      error: function() {
        calendarHelper.displayError();
      },
    },
    eventClick: function(calEvent, jsEvent, view) {
      new XWiki.MoccaCalendar.MoccaCalendarPopup({editMode: false, event: calEvent}, calendarHelper);
      jsEvent.preventDefault();
      return false;
    },
    // FIXME: this callback is ignored in fullcalendar3
    viewRender: function(view, element) {
      XWiki.MoccaCalendar.Helper.setCalendarView(view.name);
    },
    header: {
      left: "$!escapetool.javascript($left)",
      center: "$!escapetool.javascript($center)",
      right: "$!escapetool.javascript($right)"
    },
    defaultView: defaultView,
#if($year!="")    year: $!escapetool.javascript($year),#end
#if($month!="")   month: $!escapetool.javascript($month), #end
#if($date!="")    date: $!escapetool.javascript($date), #end
    firstDay: $escapetool.javascript($firstDay),
#if($minTime!="")    minTime: "$!escapetool.javascript($minTime)", #end
#if($maxTime!="")    maxTime: "$!escapetool.javascript($maxTime)", #end
    editable: #if($canCreateEvents) true #else false#end ,
    selectable: #if($canCreateEvents) true #else false#end ,
    selectHelper: true,
    select: function(start, end, jsEvent, view) {
      calendarHelper.showCreateEventFrom(start, end);
      calendar.fullCalendar('unselect');
    },
    eventDrop: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, false, delta, event.start, event.end, revertFunc);
    },
    eventResize: function(event, delta, revertFunc, jsEvent, ui, view) {
      calendarHelper.updateEvent(event.id, true, delta, event.start, event.end, revertFunc);
    },
    aspectRatio:1.8,
    buttonText: {
      today: '$escapetool.javascript($services.localization.render('xwiki.calendar.button.today'))',
      day: '$escapetool.javascript($services.localization.render('xwiki.calendar.button.day'))',
      week:'$escapetool.javascript($services.localization.render('xwiki.calendar.button.week'))',
      month:'$escapetool.javascript($services.localization.render('xwiki.calendar.button.month'))',
      plainList:'$escapetool.javascript($services.localization.render('MoccaCalendar.calendar.plainlist'))'
    },
    monthNames: $services.localization.render('xwiki.calendar.monthNames'),
    monthNamesShort: $services.localization.render('xwiki.calendar.monthNamesShort'),
    dayNames: $services.localization.render('xwiki.calendar.dayNames'),
    dayNamesShort: $services.localization.render('xwiki.calendar.dayNamesShort'),
    allDayText: "$escapetool.javascript($services.localization.render('xwiki.calendar.allDayText'))",
    axisFormat: "$escapetool.javascript($services.localization.render('xwiki.calendar.axisFormat'))",
    smallTimeFormat: "$escapetool.javascript($services.localization.render('xwiki.calendar.axisFormat'))",
    timeFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.timeFormat'))",
    views: {
      month: {
         columnFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.columnFormat.month'))",
         titleFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.titleFormat.month'))",
      },
      week: {
         columnFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.columnFormat.week'))",
         titleFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.titleFormat.week'))",
      },
      day: {
         columnFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.columnFormat.day'))",
         titleFormat: "$!escapetool.javascript($services.localization.render('xwiki.calendar.titleFormat.day'))",
      }
    }
  });
  jQuery('#calendar${calcounter}-btn').click( function(e) { calendarHelper.showCreateEvent(); e.preventDefault(); });
  // helper to be used in callback above
#set($newPageParams = "template=MoccaCalendar.MoccaCalendarEventTemplate&amp;parentFROM=${escapetool.url($calendarDoc)}&amp;form_token=${services.csrf.getToken()}&amp;ocalcaction=create")
#set($randomDocUrl = $xwiki.getURL("randomPage${util.generateRandomString(10)}",'edit',$newPageParams))
#set($updateUrlParams="?xpage=plain&amp;outputSyntax=plain&amp;calendarDoc=${escapetool.url(${calendarDoc})}&amp;")
  var calendarHelper = new XWiki.MoccaCalendar.Helper(calendar, "$!escapetool.javascript($dateFormat)", "$escapetool.javascript($jsonUrl)", "$escapetool.javascript($randomDocUrl)", "$escapetool.javascript("${updateUrl}${updateUrlParams}")", "$escapetool.javascript($newPageNameUrl)",  "$escapetool.javascript($dateCheckUrl)","$escapetool.javascript($deleteEventInstanceUrl)","$escapetool.javascript($newPageParams)", "${escapetool.javascript($services.csrf.getToken())}");
  });
});
&lt;/script&gt;
{{/html}}
#else ## of #if($xcontext.action=='view')
Mocca Calendar Macro
#end
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription/>
    </property>
    <property>
      <contentJavaType/>
    </property>
    <property>
      <contentType>No content</contentType>
    </property>
    <property>
      <defaultCategory>Content</defaultCategory>
    </property>
    <property>
      <description>Displays a Calendar</description>
    </property>
    <property>
      <id>moccacalendar</id>
    </property>
    <property>
      <name>Mocca Calendar</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>19383278-1cc2-4d08-91f4-e141dfe6af9b</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>page</defaultValue>
    </property>
    <property>
      <description>Possible values are 'wiki','space' or 'page', where:
 'page': only events which are children pages of this page will be included,
 'space': only events which are in the space of the calendar doc will be included,
 'wiki': all events will be included.</description>
    </property>
    <property>
      <mandatory/>
    </property>
    <property>
      <name>filter</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>1</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>ac5314c2-3e3d-4e02-8239-71fdd80dc0c8</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The calendar document whose events are shown (only if filter is set to 'page'). This value is also used as the default calendar to create new events for. If missing, the current document is used.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>calendarDoc</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>2</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>18d46da8-12e8-4e41-96a7-cae913605353</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>month</defaultValue>
    </property>
    <property>
      <description>The initial way the calendar is displayed; can be changed by the user. Possible values are: 'month', 'agendaWeek', 'agendaDay' or 'plainList'</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>defaultView</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>3</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3754af83-4f3c-4288-9b40-ad22fc711e1d</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>First day (from 0 being Sunday to 6 being Monday) of the week to show in the calendar. Leave empty for Monday</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>firstDay</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>4</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>a03b024d-55d7-4b7f-a14c-65bf6f38fe12</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>8:00</defaultValue>
    </property>
    <property>
      <description>First time to show in the calendar. Users won't see hours before this time. Leave empty for default (8:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>minTime</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>5</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>bf7fe171-f1b8-4545-b3cf-7da63b114b0c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>23:00</defaultValue>
    </property>
    <property>
      <description>Last time to show in the calendar. Users won't see hours after this time. Leave empty for default (23:00)</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>maxTime</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>6</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>0dfd1de3-8c01-4b90-b8ce-127a69f26301</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Year of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>year</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>7</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>97daa50d-7ba8-4aaf-9182-c83ecd3ae36c</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Month (from 0 to 11) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>month</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>8</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>6bda9131-9971-4721-9b0a-90c6a47b4658</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Day (from 1 to 31) of the date to show when loading the calendar. Leave empty for today</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>date</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>MoccaCalendar.Code.Macro</name>
    <number>9</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>d77a01be-1c2f-433c-93d0-f3703b0e6d48</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue>false</defaultValue>
    </property>
    <property>
      <description>Sets a limit on daily event display. Extra events appear in a popover. If false (default) shows all events, else (true) restricts them to the day cell’s height.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>eventLimit</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
</xwikidoc>
